#
#  This rules file assumes that gnu make is executing c:\bin\sh.exe as its command driver -- not cmd.exe.
#  If you do not have one, compile the code in sh.zip and copy the executable to c:\bin\sh.exe
#  This would be a one time operation.  Note that c:\bin\sh.exe must be partially bash compatible but a full bash
#  is not required, just the handling of if statements, while statements, for statements and so forth.
#  Note in the code below, that most activies are handled using cmd /c or plain vanilla program command line
#  invocations.  The interpreter in sh.zip basically just handles enough of bash syntax to make the following
#  code work correctly.
#
#  Note also that it is assumed that all filenames referenced in the makefile use the UNIX not the DOS directory
#  separator.  Thus, in the code below you see that every time that filename is stored in a command line
#  which is to be executed, the / is converted to \\ using a $(subst) directive.  Yes this is tedious to use
#  on dos, but once you define the symbols below, you don't have to mess with it often in your own makefiles.

OBJ_EXT:= obj
EXE_EXT:= exe
LIB_EXT:= lib
DLL_EXT:= dll

ifeq ("$(BUILD_DLL)", "true")
DLL_OPTIONS += /MDd
DLL_LINK_OPTIONS += /DLL
endif


ifneq ("$(MAKECMDGOALS)","clean")

-include make.dependencies

make.dependencies::  $(wildcard *.c *.cpp *.cxx)
	$(HIDE)cmd /c echo Updating $(CURDIR) $@
	$(HIDE)cmd /c for %f in ($(foreach f,$+,$(basename $f))) do @echo -include .make/%f.d >$@
endif

DEBOPT = $(subst Optimized,-O2,$(subst Debug,-Zi -Od -Ob0 -Oy-,$(OPT_LEVEL)))

# the following variables must not be defined using := or +=  
RAW_COMPILE.cpp  =  cl /nologo $(DEBOPT) /EHsc $(patsubst %, -I%, $(INCLUDES)) /I $(subst /,\,$(MAKE_RULES_DIR)) $(CPP_OPTIONS) $(DLL_OPTIONS) /c  /Fo$(subst /,\\,$@) $(subst /,\\,$<)
RAW_COMPILE.c    =  cl /nologo $(DEBOPT) $(patsubst %, -I%, $(INCLUDES)) /I $(subst /,\,$(MAKE_RULES_DIR)) $(C_OPTIONS) /c /Fo$(subst /,\\,$@) $(subst /,\\,$<) $(DLL_OPTIONS)
RAW_LINK.cpp     =  cl /nologo $(DEBOPT) /Fe$(subst /,\\,$@) $(filter %.obj,$+) $(filter %.lib,$+) $(patsubst %.dll,%.lib,$(filter %.dll,$+)) /link $(CPP_LINK_OPTIONS) 
RAW_LINK.c       =  cl /nologo $(DEBOPT) /Fe$(subst /,\\,$@) $(filter %.obj,$+) $(filter %.lib,$+) $(patsubst %.dll,%.lib,$(filter %.dll,$+)) /link $(C_LINK_OPTIONS) 
RAW_LIB.c        =  if [ -r $@ ] ; then cmd /c del $(subst /,\\,$@) ; fi ; lib.exe /nologo /out:$(subst /,\\,$@)  $(subst /,\\,$^)
LINK.cpp         =  $(RAW_LINK.cpp)
LINK.c           =  $(RAW_LINK.c)
LINK.cxx         =  $(RAW_LINK.cpp)  # same as cpp
COMPILE.c        =  $(RAW_COMPILE.c)
COMPILE.cpp      =  if $(RAW_COMPILE.cpp) /showIncludes >.make\\$(notdir $(patsubst %.obj,%,$@)).log ; \
		    then cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows\\windows_gmake_cl_log_2_d.bat  $(notdir $(patsubst %.obj,%,$@)) $(OBJDIR) ; \
		    else cmd /c type .make\\$(notdir $(patsubst %.obj,%,$@)).log ; fi
COMPILE.cxx      =  $(COMPILE.cpp)  # yep, they are the same
LIB.c            =  $(RAW_LIB.c)
LIB.cpp          =  $(RAW_LIB.c)  # yep the same
LIB.cxx          =  $(RAW_LIB.c)  # yep the same

$(OBJDIR)%.obj:   $(SRCDIR)%.cpp   ; $(HIDE)cmd /c echo Compiling $@ ; $(COMPILE.cpp)
$(OBJDIR)%.obj:   $(SRCDIR)%.cxx   ; $(HIDE)cmd /c echo Compiling $@ ; $(COMPILE.cxx)
$(OBJDIR)%.obj:   $(SRCDIR)%.c     ; $(HIDE)cmd /c echo Compiling $@ ; $(COMPILE.c)
$(BINDIR)%.exe:   $(OBJDIR)%.obj   ; $(HIDE)cmd /c echo Linking  $@  ; $(LINK.cpp)

%.sntxck:         $(SRCDIR)%.cpp   ; $(RAW_COMPILE.cpp) /Zs

clean::
	$(HIDE) cmd /c del /q  $(subst /,\\,$(OBJDIR))*.$(OBJ_EXT)  2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(LIBDIR))*.$(LIB_EXT)  2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(BINDIR))*.$(EXE_EXT)  2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(BINDIR))*.$(DLL_EXT)  2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(BINDIR))*.pdb         2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(BINDIR))*.ilk         2>nul
	$(HIDE) cmd /c del /q  $(subst /,\\,$(BINDIR))*.suo         2>nul
	$(HIDE) cmd /c del /q  *.$(OBJ_EXT)                         2>nul
	$(HIDE) cmd /c del /q  *.$(LIB_EXT)                         2>nul
	$(HIDE) cmd /c del /q  *.$(EXE_EXT)                         2>nul
	$(HIDE) cmd /c del /q  *.$(DLL_EXT)                         2>nul
	$(HIDE) cmd /c del /q  *.pdb                                2>nul
	$(HIDE) cmd /c del /q  *.ilk                                2>nul
	$(HIDE) cmd /c del /q  *.suo                                2>nul
	$(HIDE) cmd /c if not "$(CLEAN_FILES)" == "" del /q  $(CLEAN_FILES)  2>nul
	$(HIDE) cmd /c rmdir /s /q .make                            2>nul
	$(HIDE) cmd /c del /q make.dependencies                     2>nul

prebuild::
ifneq ("$(MAKECMDGOALS)","nothing")
ifneq ("$(MAKECMDGOALS)","clean")
	$(HIDE)cmd /c if not exist .make mkdir .make
endif
endif

backup:
	cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows\\windows_gmake_backup.bat \
	    $(subst /,\\,$(CURDIR))\\.. \
	    $(notdir $(patsubst %/,%,$(CURDIR)))

ECHO = cmd /c @echo
RMDIR= cmd /c rmdir /S /Q >nul: 2>&1
RMALL= cmd /c del  /F /Q >nul: 2>&1
MKDIR= cmd /c @mkdir
CAT=   cmd /c type
CPDIR= cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows_gmake_cpdir.bat  # copy src to dest
CP=    cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows_gmake_cp.bat     # copy src to dest
MV=    cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows_gmake_mv.bat     # copy src to dest
MKDIR:= cmd /c $(subst /,\\,$(MAKE_RULES_DIR))windows_gmake_mkdir.bat 
FILE_COMPARE= cmd /c FC /W /N /LB3
MKLIB= if [ -r $@ ] ; then cmd /c del /F /Q $(subst /,\\,$@) 2>nul:  ; fi ; lib.exe /nologo /out:$(subst /,\\,$@)  $(subst /,\\,$^)
MKDLL=  $(RAW_LINK.cpp) $(DLL_LINK_OPTIONS) 
SLASH=\\
