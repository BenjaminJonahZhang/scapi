package edu.biu.protocols.CommitmentWithZkProofOfDifference;

import java.io.Serializable;

import edu.biu.scapi.interactiveMidProtocols.commitmentScheme.CmtCCommitmentMsg;

/**
 * This class used to hold some data of the committer in the difference protocol. <p>
 * It is written to a file in the end of the offline phase and read again in the beginning of the online phase. <p>
 * 
 * This bundle holds a value to commit on, the related pair of commitments and the wCommitment which is the 
 * sigma array generated by the receiver of the protocol. 
 * 
 * @author Cryptography and Computer Security Research Group Department of Computer Science Bar-Ilan University (Asaf COhen)
 *
 */
public class DifferenceCommitmentCommitterBundle implements Serializable {
	private static final long serialVersionUID = 8376366734049755086L;
	private final byte[] x;							//The committed value.
	private final CmtCCommitmentMsg wCommitment;	//Sigma array.
	private final SC c;								//The pairs of commitments on the committed value.
	
	/**
	 * A constructor that sets the parameters.
	 * @param x The committed value.
	 * @param c The pairs of commitments on the committed value.
	 * @param wCommitment The sigma array.
	 */
	public DifferenceCommitmentCommitterBundle(byte[] x, SC c, CmtCCommitmentMsg wCommitment) {
		this.x = x;
		this.c = c;
		this.wCommitment = wCommitment;
	}
	
	/*
	 * Get function for each class member.
	 */
	public byte[] getX() {
		return x;
	}

	public CmtCCommitmentMsg getCommitmentToW() {
		return wCommitment;
	}

	public SC getC() {
		return c;
	}
}
